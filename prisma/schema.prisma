generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  password    String
  NIK         String
  role        Role       @default(USER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isPremium   Boolean    @default(false)
  occupation  String?
  ratings     Rating[]
  profilePictureUrl String?
  @@index([email], name: "idx_user_email")
}

model Lawyer {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String
  NIK         String
  role        Role
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isPremium   Boolean       @default(false)
  rating      Float         @default(0)
  address     String?
  description String?
  university  String?
  profilePictureUrl String?
  profile     LawyerProfile[]
  ratings     Rating[]
  @@index([email], name: "idx_lawyer_email")
}


model LawyerProfile {
  id             Int                    @id @default(autoincrement())
  lawyerId       Int
  alumnus        String?
  STRNumber      String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  experience     String?
  lawyer         Lawyer                 @relation(fields: [lawyerId], references: [id], onDelete: Cascade)
  specialization LawyerSpecialization[]

  @@index([lawyerId], map: "idx_lawyerprofile_lawyer")
}

model Rating {
  id          Int      @id @default(autoincrement())
  value       Float
  userId      Int
  lawyerId    Int
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  lawyer      Lawyer   @relation(fields: [lawyerId], references: [id])
  @@index([userId, lawyerId], name: "idx_rating_user_lawyer")
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  url         String   @unique
  publishedAt DateTime

  @@index([publishedAt], map: "idx_news_publishedAt")
}

model Specialization {
  id             Int                    @id @default(autoincrement())
  name           String                 @unique
  lawyerProfiles LawyerSpecialization[]

  @@index([name], map: "idx_specialization_name")
}

model LawyerSpecialization {
  lawyerProfileId  Int
  specializationId Int
  lawyerProfile    LawyerProfile  @relation(fields: [lawyerProfileId], references: [id])
  specialization   Specialization @relation(fields: [specializationId], references: [id])

  @@id([lawyerProfileId, specializationId])
}

enum Role {
  USER
  LAWYER
  ADMIN
}
